update.packages(checkBuilt=TRUE, ask=FALSE)
testurl<-"https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
getwd()
download.file(testurl,"./camera.csv",method="curl")
library(RCurl)
download.file(testurl,"./camera.csv",method="curl")
download.file(testurl,"./camera.csv",method="auto")
download.file(testurl,"./camera.csv",method="curl")
download.file(testurl,"camera.csv",method="curl")
testurl<-"https:\\data.baltimorecity.gov\api\views\dz54-2aru\rows.csv?accessType=DOWNLOAD"
testurl<-"https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(testurl,"camera.csv",method="curl")
setInternet()
setInternet2()
setInternet2(NA)
download.file(testurl,"camera.csv",method="curl")
q()
setInternet2
setInternet2()
testurl<-"https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(testurl,"camera.csv")
download.file(testurl,"camera.csv",method="curl")
download.file(testurl,"camera.csv",method="curl")
download.file(testurl,"camera.csv",method="curl")
list.files()
head("camera.csv")
cameradata<-read.table("camera.csv")
cameradata<-read.table("camera.csv", Sep=",")
cameradata<-read.table("camera.csv",Sep=",")
cameradata<-read.table("camera.csv",sep=",")
head(cameradata)
cameradata<-read.table("camera.csv",sep=",", header="true")
cameradata<-read.table("camera.csv",sep=",", header=true)
cameradata<-read.table("camera.csv",sep=",", header=TRUE)
head(cameradata)
cameradata<-read.csv("camera.csv")
head(cameradata)
str(cameradata)
summary(cameradata)
q()
getwd()
dir()
file<-"https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(file,"./Baltimore/camera.xlsx",method="curl")
datedownloaded<-date()
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("XLConnect")
library(XLConnect)
library(XML)
install.packages("XML")
library(XML)
file<-"http://www.w3schools.com/xml/simple.xml"
xmldoc<-xmlTreeParse(file)
head(xml)
head(xmldoc)
class(xmldoc)
str(xmldoc)
rootnode<-xmlRoot(xmldoc)
head(rootnode)
xmlname(rootnode)
xmlName(rootnode)
names(rootnode)
str(rootnode)
rootnode[[1]]
rootnode[[2]]
rootnode[[2]][[1]]
rootnode[[2]][[2]]
rootnode[[2]][[3]]
rootnode[[2]][[5]]
xmlValue(rootnode)
xmlValue(rootnode[[1]])
xmlValue(rootnode[[1]][[2]])
xmlName(rootnode[[1]][[2]])
/node
rootnode
rootnode[[1]]
names(rootnode)
names(rootnode[[1]])
xmlname(rootnode[[|]])
xmlname(rootnode[[1]])
xmlName(rootnode[[1]])
values(rootnode[[1]])
rootnode[[1]][["name"]]
xmlSapply(rootnode, xmlValue)
xmlSApply(rootnode, xmlValue)
xmlApply(rootnode, xmlValue)
xmlApply(rootnode, function(x) xmlSapply(x, xmlValue))
xmlApply(rootnode, function(x) xmlSApply(x, xmlValue))
xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue))
res<-xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue))
class(res)
res
str(res)
res[1]
res[1,1]
res[[1]]
res[[2]]
res[,1]
res[1,]
res[2,]
res
products<-xmlSApply(rootnode, function(x) xmlSApply(x[["name"]], xmlValue))
products
class(products)
products[1]
prices<-xmlSApply(rootnode, function(x) xmlSApply(x[["price"]], xmlValue))
prices
cbind(products,prices)
file
products
products2<-xpathSApply(rootnode,"//name", xmlValue)
products2<-xpathSApply(rootnode,"//name",xmlValue)
rootnode
install.packages("XML", dependencies=TRUE)
install.packages("XML", dependencies = TRUE)
file<-"http://www.w3schools.com/xml/simple.xml"
rootnode <-xmlRoot(xmlTreeParse(file))
library(XML)
file<-"http://www.w3schools.com/xml/simple.xml"
rootnode <-xmlRoot(xmlTreeParse(file))
rootnode
products<-xpathSApply(rootnode,”//name”, xmlValue)
products<-xpathSApply(rootnode,"//name", xmlValue)
rootnode <-xmlRoot(xmlTreeParse(file, userinternalnodes=TRUE))
rootnode <-xmlRoot(xmlTreeParse(file, userInternalNodes=TRUE))
rootnode <-xmlRoot(xmlTreeParse(file, useInternalNodes=TRUE))
products<-xpathSApply(rootnode,"//name", xmlValue)
products
prices<-xpathSApply(rootnode,"//price", xmlValue)
prices
file<-"view-source:http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(file,useInternalNodes=TRUE)
class(doc)
doc
doc<-htmlTreeParse(file,useInternal=TRUE)
file<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(file,useInternalNodes=TRUE)
doc<-htmlTreeParse(file,useInternal=TRUE)
class(doc)
doc
teams<-xpathSApply(doc,”li[@class=’team-name’]”,xmlValue)
teams<-xpathSApply(doc,"li[@class=’team-name’]",xmlValue)
teams<-xpathSApply(doc,"li[@class='team-name']",xmlValue)
teams
scores<-xpathSApply(doc,"li[@class='score']",xmlValue)
scores
scores<-xpathSApply(doc,"/li[@class='score']",xmlValue)
teams<-xpathSApply(doc,"/li[@class='team-name']",xmlValue)
scores
teams<-xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores<-xpathSApply(doc,"//li[@class='score']",xmlValue)
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages(curl)
install.packages("curl")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
str(jsondata)
str(jsonData)
class(jsonData)
names(jsonData)
names(jsondata$owner)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
jsonData$owner$type
jsonData$owner$events_url
str(jsonData$owner)
iris
str(iris)
iris"species"
iris$species
iris$Species
testjson<-toJson(iris,pretty=TRUE)
testjson<-toJSON(iris,pretty=TRUE)
class(testjson)
str(testjson)
testjson
test2<-fromJSON(testJSON)
test2<-fromJSON(testjson)
class(test2)
head(test2)
jsondata
jsonData
head(jsonData)
clear()
clean()
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
str(cars)
CARS<-data.table(cars)
str(CARS)
head(cars)
head(CARS)
tables()
sapply(CARS,class)
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
SetInternet2()
library()
setInternet2()
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
library(devtools)
find_rtools()
find_rtools()
library(devtools)
install_github("Rdatatable/data.table", build_vignettes = FALSE)
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
set_config( config( ssl.verifypeer = 0L ) )
library(Rcurl)
library(RCurl)
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
set_config( config( ssl.verifypeer = 0L ) )
download.file(flights,"./flights.csv",method="curl")
flighturl<-"https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv"
download.file(flighturl,"./flights.csv",method="curl")
options(RCurlOptions = list(cainfo = system.file(“CurlSSL”, “cacert.pem”, package = “Rcurl”)))
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "Rcurl")))
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
?fread
?fread()
q()
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
library(data.table)
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv", showProgress=TRUE)
q()
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
setInternet2()
install.packages("RMySQL", type = "source")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
setInternet2()
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
libray(Rcurl)
library(Rcurl)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
setInternet2()
install.packages("RMySQL", type = "source")
exit
q()
library(RCurl)
setInternet2()
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
q()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
q()
library(httr)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html2 = GET(url)
class(html2)
str(html2)
content2 = content(html2,as="text")
class(content2)
head(content2)
parsedHtml = htmlParse(content2,asText=TRUE)
library(XML)
parsedHtml = htmlParse(content2,asText=TRUE)
class(parsedHtml)
names(pasedHtml)
xmlSApply(parsedHtml,"//title",xmlvalue)
xpathSApply(parsedHtml,"//title",xmlvalue)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHtml,"td[@class='gsc_a_ac",xmlValue)
xpathSApply(parsedHtml,"td[@class='gsc_a_ac'",xmlValue)
xpathSApply(parsedHtml,"td[@class='gsc_a_ac']",xmlValue)
xpathSApply(parsedHtml,"td[@class='gsc_a_c']",xmlValue)
xpathSApply(parsedHtml,"td[@class='gs_gray']",xmlValue)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
str(pg2)
class(pg2)
extpg2<-htmlTreeParse(pg2)
extpg2<-htmlParse(pg2)
extpg2<-content(pg2)
class(extpg2)
pg2
extpg2b<-htmlTreeParse(extpg2)
extpg2b<-htmlParse(extpg2)
extpg2<-content(pg2,as="text")
class(extpg2)
extpg2
pextg2<-parsedHtml(htmlParse(extpg2,asText=TRUE)
pextg2<-htmlParse(extpg2,asText=TRUE)
class(pextg2)
pextg2
lego<-"http://www.imdb.com/title/tt1490017/"
html<-htmlParse(lego)
xpathSApply(lego, "//strong span",xmlValue)
html<-htmlParse(lego,useInternalNodes=T)
xpathSApply(lego, "//strong span",xmlValue)
xpathSApply(html, "//strong span",xmlValue)
xpathSApply(html, "//strong_span",xmlValue)
xpathSApply(html, "//'strong span'",xmlValue)
xpathSApply(html,"//strong span",xmlValue)
xpathSApply(html,"//strong",xmlValue)
xpathSApply(html,"//[strong span]",xmlValue)
xpathSApply(html,"//strong%20%span",xmlValue)
xpathSApply(html,"//strongspan",xmlValue)
xpathSApply(html,"//text(strong span)",xmlValue)
xpathSApply(html,"//c(strong,span)",xmlValue)
xpathSApply(html,"//strong/span",xmlValue)
xpathSApply(html,"//td/p",xmlValue)
xpathSApply(html,"//*[(@id = "overview-top")]//p",xmlValue)
xpathSApply(html,"//*[(@id = 'overview-top')]//p",xmlValue)
xpathSApply(html,"//*[(@id = 'titleStoryLine')]//p",xmlValue)
t<-xpathSApply(html,"//*[(@id = 'titleStoryLine')]//p",xmlValue)
t
url<-"http://www.capraboacasa.com/TiendaPortal/appmanager/TP/TD?_nfpb=true&_windowLabel=portlet_supermercado&portlet_supermercado_actionOverride=%2Fcom%2Fcaprabo%2Fcac%2Ftienda%2Fsupermercado%2FsetActiveCategory&_pageLabel=label_Xfdadfs&portlet_supermercadonetui_treeselected=0.2"
Cap<-htmlTreeParse(url,useInternalNodes=T)
art<-xpathSApply(Cap,"//*[contains(concat( ' ', @class, ' ' ), concat( ' ', 'opsProducto', ' ' ))]")
art
names(art)
art[1]
art[[1]]
class(art)
art2<-xpathSApply(Cap,"//*[contains(opsProducto)]",xmlValue)
art<-xpathSApply(Cap,"//*[contains(concat( ' ', @class, ' ' ), concat( ' ', 'opsProducto', ' ' ))]",xmlValue)
art
art<-xpathSApply(Cap,//*[contains(concat( " ", @class, " " ), concat( " ", "opsProducto", " " ))],xmlValue)
art<-xpathSApply(Cap,'//*[contains(concat( " ", @class, " " ), concat( " ", "opsProducto", " " ))]',xmlValue)
art
art<-xpathSApply(Cap,'//a[@class="opsProducto"]',xmlValue)
art
art<-xpathSApply(Cap,"//a[@class='opsProducto'']",xmlValue)
art<-xpathSApply(Cap,"//a[@class='opsProducto']",xmlValue)
Cap
url<-"http://www.capraboacasa.com/TiendaPortal/appmanager/TP/TD?_nfpb=true&_windowLabel=portlet_supermercado&portlet_supermercado_actionOverride=%2Fcom%2Fcaprabo%2Fcac%2Ftienda%2Fsupermercado%2FsetActiveCategory&_pageLabel=label_Xfdadfs&portlet_supermercadonetui_treeselected=0.2"
Cap<-htmlTreeParse(url,useInternalNodes=T)
art<-xpathSApply(Cap,"//a[@class='opsProducto']",xmlValue)
Cap
htmlParse(url)
Cap<-GET(url)
cont=content(Cap,as="text")
parsh=parsedHtml(cont,asText=TRUE)
parsh=htmlParse(cont,asText=TRUE)
xpathSApply(parsh,"/a[class='opsProducto'],xmlValue)
xpathSApply(parsh,"/a[class='opsProducto']",xmlValue)
art<-xpathSApply(parsh,"/a[@class='opsProducto']",xmlValue)
art<-xpathSApply(parsh,"/td[@class='opsProducto']",xmlValue)
art<-xpathSApply(parsh,'//*[contains(concat( " ", @class, " " ), concat( " ", "titOpciones", " " ))]//span',xmlValue)
q()
library(httr)
myapp = oauth_app("twitter",key="4VRDh5v3NSygVhhxPk6NiIwvV",secret="ezh8NH1nD4ZL0DHiM3BzrHFn08z1Ru4R0WvLyfVt8WeunMGlTA")
myapp
sig = sign_oauth1.0(myapp,
token ="940088503-S9n6dX5L6WsaKIuQuUqvkZuDuZxwZvSLMF97NiCO",token_secret ="ypjs2Xyf7vq6H20S02AvO1mJW2D5vgWUVlr4fcvFBWF10")
sig
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
class(homeTL)
json1 = content(homeTL)
class(json1)
str(json1)
head(json1)
json1[1]
names(json1)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
class(json2)
str(json2)
names(json2)
head(json2)
json2[1]
json2[[1]]
json2[1,]
json3<-fromJSON(homeTL)
homeTL
names(json2)
json2$text
class(json2$text)
names(json2$text)
str(json2$text)
names(json2)
str(json$entities)
str(json2$entities)
names(json2$entities)
str(json2$entitites$media)
str(json2$entitites[[media]])
str(json2$entitites[["media"]])
str(json2$entitites$symbols)
str(json2$entitites$hashtags)
names(json2[["entities"]])
json2[["entities"]][["media"]]
q()
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
class(DF)
table(DF$Admit,DF$Gender)
head(DF)
xtabs(Freq ~ Admit+Gender,data=DF)
xtabs(Freq ~ Admit+Dept,data=DF)
xtabs(Freq ~ Admit+Dept+Gender,data=DF)
ftable(DF)
ftable(xtabs(Freq ~.,data=DF))
ftable(xtabs(Freq ~ Gender+Admit+Dept.,data=DF))
ftable(xtabs(Freq ~ Gender+Admit+Dept,data=DF))
print(object.size(DF), units="Mb")
print(object.size(DF))
q()
library(reshape2)
head(mtcars)
class(mtcars)
summary(mtcars)
str(mtcars)
names(mtcars)
colnames(mtcars)
head(mtcars)
mtcars&carname
mtcars$carname<-rownames(mtcars)
head(mtcars)
mtcatsm<-melt(mtcars, id=c("carname","gear","cyl"),measure.vars=c("hp","mpg"))
head(mtcatsm)
mtcatsm[carname=="Mazda RX4"]
mtcatsm["carname"=="Mazda RX4"]
mtcatsm["carname"=="Mazda RX4",]
mtcatsm[["carname"=="Mazda RX4",]]
mtcatsm["Mazda RX4" %in% "carname",]
class(mtcatsm)
mtcatsm[1,]
mtcatsm[1,1]
mtcatsm[("Mazda RX4" %in% mtcatsm$carname),]
mtcatsm[("Mazda RX4" == mtcatsm$carname),]
"Mazda RX4" %in% mtcatsm$carname
cyldata<-dcast(mtcatsm,cyl ~variable)
cyldata
cyldata<-dcast(mtcatsm,cyl ~variable,mean)
cyldata
cyldata<-dcast(mtcatsm,cyl ~variable,sum)
cyldata
cyldata<-dcast(mtcatsm,cyl+gear ~variable,mean)
cyldata
cyldata<-dcast(mtcatsm,gear+cyl ~variable,mean)
cyldata
head(InsectSprays)
Insplit<-split(InsectSprays,spray)
Insplit<-split(InsectSprays,"spray")
head(Insplit)
Insplit<-split(InsectSprays$count,"spray")
head(Insplit)
Insplit<-split(InsectSprays$count,InsectSprays$spray)
head(Insplit)
Insapp<-sapply(Insplit,sum)
Insapp
class(Insapp)
head(mtcars)
scars<-split(c(mtcars$mpg,mtcars$hp),mtcars&cyl
)
scars<-split(c(mtcars$mpg,mtcars$hp),mtcars$cyl)
res<-sapply(scars,mean)
res
head(scars)
scars<-split(mtcars,mtcars$cyl)
head(scars)
res<-sapply(scars,mean)
res<-sapply(scars,function(x) colmeans(x))
res<-sapply(scars,function(x) colMeans(x))
res<-sapply(scars,function(x) colMeans(x[,c("mpg","hp")]))
res
res<-ddply(mtcars,.(cyl),summarise,sum=sum(count))
library(plyr)
res<-ddply(mtcars,.(cyl),summarise,sum=sum(count))
res<-ddply(mtcars,.(cyl),summarize,sum=sum(count))
res<-ddply(mtcars,.(cyl),summarize,avmpg=mean(mpg),avhp=mean(hp))
res
mercs<-mtcars[grep("Mercedes",rownames(mtcars)),]
mercs<-mtcars[grep("Merc",rownames(mtcars)),]
mercs
res<-ddply(mercs,.(gear,cyl),summarise,avghp=mean(hp),avgmpg=mean(mpg))
res
q()
library(dplyr)
install.packages("dplyr")
q()
getwd()
setwd("..")
dir()
getwd()
setwd(..)
setwd("..")
getwd()
dir()
setwd("Getting and Cleaning Data")
dir()
setwd("..")
dir()
setwd("R")
dir()
setwd("Rwd")
dir()
setwd("Cleaning work")
dir()
setwd("Assignment")
dir()
source("run_analysis.R")
q()
